#ifndef NODE_C_H
#define NODE_C_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum FsEncodingType {
  FsEncodingTypeAscii,
  FsEncodingTypeUtf8,
  FsEncodingTypeUtf16le,
  FsEncodingTypeUcs2,
  FsEncodingTypeLatin1,
  FsEncodingTypeBuffer,
} FsEncodingType;

typedef enum ReaddirResultType {
  ReaddirResultTypeString,
  ReaddirResultTypeBuffer,
  ReaddirResultTypeType,
} ReaddirResultType;

typedef enum StringEncoding {
  StringEncodingAscii,
  StringEncodingUtf8,
  StringEncodingUtf16le,
  StringEncodingUcs2,
  StringEncodingBase64,
  StringEncodingBase64Url,
  StringEncodingLatin1,
  StringEncodingBinary,
  StringEncodingHex,
} StringEncoding;

typedef struct AsyncBoolClosure AsyncBoolClosure;

typedef struct AsyncClosure AsyncClosure;

typedef struct AsyncFileDirClosure AsyncFileDirClosure;

typedef struct AsyncFileHandleClosure AsyncFileHandleClosure;

typedef struct AsyncFileStatClosure AsyncFileStatClosure;

typedef struct AsyncFileWatchClosure AsyncFileWatchClosure;

typedef struct AsyncFsEncodingClosure AsyncFsEncodingClosure;

typedef struct AsyncI32Closure AsyncI32Closure;

typedef struct AsyncReaddirClosure AsyncReaddirClosure;

typedef struct AsyncStringClosure AsyncStringClosure;

typedef struct AsyncUsizeClosure AsyncUsizeClosure;

typedef struct AsyncWatchClosure AsyncWatchClosure;

typedef struct Buffer Buffer;

typedef struct FileDir FileDir;

typedef struct FileDirent FileDirent;

typedef struct FileHandle FileHandle;

typedef struct FileWatchEvent FileWatchEvent;

typedef struct FsEncoding FsEncoding;

typedef struct NodeError NodeError;

typedef struct ReaddirResult ReaddirResult;

typedef struct WatchEvent WatchEvent;

typedef struct FileStat {
  int64_t dev;
  int64_t ino;
  int32_t mode;
  int64_t nlink;
  int32_t uid;
  int32_t gid;
  int64_t rdev;
  int64_t size;
  int64_t blksize;
  int64_t blocks;
  double atimeMs;
  double mtimeMs;
  double ctimeMs;
  double birthtimeMs;
  double birthtime;
  double atime;
  double mtime;
  double ctime;
  bool isBlockDevice;
  bool isCharacterDevice;
  bool isDirectory;
  bool isFIFO;
  bool isFile;
  bool isSocket;
  bool isSymbolicLink;
} FileStat;

typedef struct ReaddirResultArray {
  struct ReaddirResult *data;
  uintptr_t length;
} ReaddirResultArray;

typedef struct AppendFileOptions {
  enum StringEncoding encoding;
  int32_t mode;
  int32_t flag;
} AppendFileOptions;

typedef struct MkDirOptions {
  uint32_t mode;
  bool recursive;
} MkDirOptions;

typedef struct MkdTempOptions {
  enum StringEncoding encoding;
} MkdTempOptions;

typedef struct OpenDirOptions {
  enum StringEncoding encoding;
  uintptr_t buffer_size;
  bool recursive;
} OpenDirOptions;

typedef struct ReaddirOptions {
  bool with_file_types;
  enum FsEncodingType encoding;
  bool recursive;
} ReaddirOptions;

typedef struct ReadFileOptions {
  int32_t flag;
  enum FsEncodingType encoding;
} ReadFileOptions;

typedef struct ReadLinkOptions {
  enum FsEncodingType encoding;
} ReadLinkOptions;

typedef struct RealPathOptions {
  enum StringEncoding encoding;
} RealPathOptions;

typedef struct RmDirOptions {
  int32_t max_retries;
  bool recursive;
  uint64_t retry_delay;
} RmDirOptions;

typedef struct RmOptions {
  bool force;
  int32_t max_retries;
  bool recursive;
  uint64_t retry_delay;
} RmOptions;

typedef struct WriteOptions {
  uintptr_t offset;
  uintptr_t length;
  intptr_t position;
} WriteOptions;

typedef struct WriteFileOptions {
  enum StringEncoding encoding;
  int32_t mode;
  int32_t flag;
} WriteFileOptions;

void node_string_destroy(char *string);

void filestat_destroy(struct FileStat *file_stat);

const char *node_error_get_clazz(const struct NodeError *error);

const char *node_error_get_message(const struct NodeError *error);

void node_error_destroy(struct NodeError *error);

/**
 * Write the latest error message to a buffer.
 *
 * # Returns
 *
 * This returns the number of bytes written to the buffer. If no bytes were
 * written (i.e. there is no last error) then it returns `0`. If the buffer
 * isn't big enough or a `null` pointer was passed in, you'll get a `-1`.
 */
int node_error_message(char *buffer, int length);

/**
 * Calculate the number of bytes in the last error's error message **not**
 * including any trailing `null` characters.
 */
int node_last_error_length(void);

void buffer_destroy(struct Buffer *buffer);

struct Buffer *buffer_clone(const struct Buffer *buffer);

struct Buffer *buffer_alloc(uintptr_t size);

struct Buffer *buffer_alloc_with_size_string_encoding(uintptr_t size,
                                                      const char *string,
                                                      enum StringEncoding encoding);

struct Buffer *buffer_concat(const uint8_t *const *buffers,
                             const uintptr_t *buffers_length,
                             uintptr_t count);

struct Buffer *buffer_concat_length(const uint8_t *const *buffers,
                                    const uintptr_t *buffers_length,
                                    uintptr_t count,
                                    uintptr_t length);

struct Buffer *buffer_from_string(const char *string, enum StringEncoding encoding);

struct Buffer *buffer_from_slice(const uint8_t *slice, uintptr_t length);

struct Buffer *buffer_copy_bytes_from(const struct Buffer *buffer);

struct Buffer *buffer_from_reference(uint8_t *data, uintptr_t size);

const char *buffer_atob(const char *string);

const char *buffer_btoa(const char *string);

void buffer_fill_string(struct Buffer *buffer, const char *string, enum StringEncoding encoding);

const char *buffer_to_string(const struct Buffer *buffer,
                             enum StringEncoding encoding,
                             intptr_t start,
                             intptr_t end);

const char *buffer_to_print_string(const struct Buffer *buffer);

uintptr_t buffer_length(const struct Buffer *buffer);

uint8_t *buffer_buffer(struct Buffer *buffer);

void buffer_write_int8(struct Buffer *buffer, int8_t value, intptr_t offset);

void buffer_write_uint8(struct Buffer *buffer, uint8_t value, intptr_t offset);

void buffer_write_uint16be(struct Buffer *buffer, uint16_t value, intptr_t offset);

void buffer_write_int16be(struct Buffer *buffer, int16_t value, intptr_t offset);

void buffer_write_uint16le(struct Buffer *buffer, uint16_t value, intptr_t offset);

void buffer_write_int16le(struct Buffer *buffer, int16_t value, intptr_t offset);

void buffer_write_uint32be(struct Buffer *buffer, uint32_t value, intptr_t offset);

void buffer_write_int32be(struct Buffer *buffer, int32_t value, intptr_t offset);

void buffer_write_uint32le(struct Buffer *buffer, uint32_t value, intptr_t offset);

void buffer_write_int32le(struct Buffer *buffer, int32_t value, intptr_t offset);

void buffer_write_big_uint64be(struct Buffer *buffer, uint64_t value, intptr_t offset);

void buffer_write_big_int64be(struct Buffer *buffer, int64_t value, intptr_t offset);

void buffer_write_big_uint64le(struct Buffer *buffer, uint64_t value, intptr_t offset);

void buffer_write_big_int64le(struct Buffer *buffer, int64_t value, intptr_t offset);

void buffer_write_float_be(struct Buffer *buffer, float value, intptr_t offset);

void buffer_write_double_be(struct Buffer *buffer, double value, intptr_t offset);

void buffer_write_float_le(struct Buffer *buffer, float value, intptr_t offset);

void buffer_write_double_le(struct Buffer *buffer, double value, intptr_t offset);

int8_t buffer_read_int8(const struct Buffer *buffer, intptr_t offset);

uint8_t buffer_read_uint8(const struct Buffer *buffer, intptr_t offset);

uint16_t buffer_read_uint16be(const struct Buffer *buffer, intptr_t offset);

int16_t buffer_read_int16be(const struct Buffer *buffer, intptr_t offset);

uint16_t buffer_read_uint16le(const struct Buffer *buffer, intptr_t offset);

int16_t buffer_read_int16le(const struct Buffer *buffer, intptr_t offset);

uint32_t buffer_read_uint32be(const struct Buffer *buffer, intptr_t offset);

int32_t buffer_read_int32be(const struct Buffer *buffer, intptr_t offset);

uint32_t buffer_read_uint32le(const struct Buffer *buffer, intptr_t offset);

int32_t buffer_read_int32le(const struct Buffer *buffer, intptr_t offset);

uint64_t buffer_read_big_uint64be(const struct Buffer *buffer, intptr_t offset);

int64_t buffer_read_big_int64be(const struct Buffer *buffer, intptr_t offset);

uint64_t buffer_read_big_uint64le(const struct Buffer *buffer, intptr_t offset);

int64_t buffer_read_big_int64le(const struct Buffer *buffer, intptr_t offset);

float buffer_read_float_be(const struct Buffer *buffer, intptr_t offset);

double buffer_read_double_be(const struct Buffer *buffer, intptr_t offset);

float buffer_read_float_le(const struct Buffer *buffer, intptr_t offset);

double buffer_read_double_le(const struct Buffer *buffer, intptr_t offset);

const char *fs_encoding_get_string_value(const struct FsEncoding *encoding);

struct Buffer *fs_encoding_get_buffer_value(const struct FsEncoding *encoding);

bool fs_encoding_is_buffer(const struct FsEncoding *encoding);

bool fs_dirent_is_block_device(const struct FileDirent *dirent);

const char *fs_dirent_path(const struct FileDirent *dirent);

const char *fs_dirent_name(const struct FileDirent *dirent);

bool fs_dirent_is_character_device(const struct FileDirent *dirent);

bool fs_dirent_is_directory(const struct FileDirent *dirent);

bool fs_dirent_is_fifo(const struct FileDirent *dirent);

bool fs_dirent_is_file(const struct FileDirent *dirent);

bool fs_dirent_is_socket(const struct FileDirent *dirent);

bool fs_dirent_is_symbolic_link(const struct FileDirent *dirent);

void fs_dir_close_sync(const struct FileDir *dir);

const char *fs_dir_path(const struct FileDir *dir);

struct FileDirent *fs_dir_read_sync(const struct FileDir *dir);

enum ReaddirResultType fs_readdir_get_type_at(const struct ReaddirResultArray *value, uintptr_t at);

const char *fs_readdir_get_string_value_at(const struct ReaddirResultArray *value, uintptr_t at);

struct Buffer *fs_readdir_get_buffer_value_at(const struct ReaddirResultArray *value, uintptr_t at);

struct FileDirent *fs_readdir_get_type_value_at(const struct ReaddirResultArray *value,
                                                uintptr_t at);

enum ReaddirResultType fs_readdir_get_type(const struct ReaddirResult *value);

const char *fs_readdir_get_string_value(const struct ReaddirResult *value);

struct Buffer *fs_readdir_get_buffer_value(const struct ReaddirResult *value);

struct FileDirent *fs_readdir_get_type_value(const struct ReaddirResult *value);

int fs_parse_flag_sync(const char *value);

void fs_access_sync(const char *path, int32_t mode);

void fs_append_file_sync(int32_t fd, const struct Buffer *buffer, struct AppendFileOptions options);

void fs_append_file_with_bytes_sync(int32_t fd,
                                    const uint8_t *bytes,
                                    uintptr_t length,
                                    struct AppendFileOptions options);

void fs_append_file_with_string_sync(int32_t fd,
                                     const char *string,
                                     struct AppendFileOptions options);

void fs_append_file_with_path_sync(const char *path,
                                   const struct Buffer *buffer,
                                   struct AppendFileOptions options);

void fs_append_file_with_path_bytes_sync(const char *path,
                                         const uint8_t *bytes,
                                         uintptr_t length,
                                         struct AppendFileOptions options);

void fs_append_file_with_path_buffer_sync(const char *path,
                                          const struct Buffer *buffer,
                                          struct AppendFileOptions options);

void fs_append_file_with_path_string_sync(const char *path,
                                          const char *string,
                                          struct AppendFileOptions options);

void fs_append_file_with_buffer_buffer_sync(struct Buffer *dest,
                                            const struct Buffer *data,
                                            struct AppendFileOptions options);

void fs_append_file_with_buffer_string_sync(struct Buffer *dest,
                                            const char *data,
                                            struct AppendFileOptions options);

void fs_async_append_file_with_buffer_string(struct Buffer *dest,
                                             const char *data,
                                             struct AppendFileOptions options,
                                             const struct AsyncClosure *callback);

void fs_async_append_file_with_buffer_buffer(struct Buffer *dest,
                                             const struct Buffer *data,
                                             struct AppendFileOptions options,
                                             const struct AsyncClosure *callback);

void fs_chmod_sync(const char *path, uint32_t mode);

void fs_chown_sync(const char *path, uint32_t uid, uint32_t gid);

void fs_close_sync(int32_t fd);

void fs_copy_file_sync(const char *src, const char *dest, uint32_t flags);

void fs_cp_sync(const char *src, const char *dest, uint32_t flags);

bool fs_exists_sync(const char *src);

void fs_fchmod_sync(int32_t fd, uint32_t mode);

void fs_fchown_sync(int32_t fd, uint32_t uid, uint32_t gid);

void fs_fdatasync_sync(int32_t fd);

struct FileStat *fs_fstat_sync(int32_t fd);

void fs_fsync_sync(int32_t fd);

void fs_ftruncate_sync(int32_t fd, uintptr_t len);

void fs_futimes_sync(int32_t fd, uintptr_t atime, uintptr_t mtime);

void fs_lchmod_sync(const char *path, uint32_t mode);

void fs_lchown_sync(const char *path, uint32_t uid, uint32_t gid);

void fs_lutimes_sync(const char *path, int64_t atime, int64_t mtime);

void fs_link_sync(const char *existing_path, const char *new_path);

struct FileStat *fs_lstat_sync(const char *path);

void fs_mkdir_sync(const char *path, struct MkDirOptions options);

const char *fs_mkdtemp_sync(const char *prefix, struct MkdTempOptions options);

int fs_open_sync(const char *path, int32_t flag, int32_t mode);

struct FileDir *fs_opendir_sync(const char *path, struct OpenDirOptions options);

#if !defined(TARGET_OS_WINDOWS)
uintptr_t fs_read_sync(int32_t fd,
                       uint8_t *buffer,
                       uintptr_t buffer_length,
                       uintptr_t offset,
                       uintptr_t length,
                       intptr_t position);
#endif

#if defined(TARGET_OS_WINDOWS)
uintptr_t fs_read_sync(int64_t fd,
                       uint8_t *buffer,
                       uintptr_t buffer_length,
                       uintptr_t offset,
                       uintptr_t length,
                       intptr_t position);
#endif

void fs_readdir_result_array_destroy(struct ReaddirResultArray *value);

struct ReaddirResultArray *fs_readdir_sync(const char *path, struct ReaddirOptions options);

void fs_encoding_destroy(struct FsEncoding *value);

struct FsEncoding *fs_read_file_sync(const char *path, struct ReadFileOptions options);

struct FsEncoding *fs_read_file_with_fd_sync(int32_t fd, struct ReadFileOptions options);

struct FsEncoding *fs_read_link_sync(const char *path, struct ReadLinkOptions options);

uintptr_t fs_readv_sync(int32_t fd, struct Buffer **buffers, uintptr_t length, int64_t position);

uintptr_t fs_readv_sync_slice(int32_t fd,
                              uint8_t *const *buffers,
                              const uintptr_t *buffers_buffers,
                              uintptr_t length,
                              int64_t position);

const char *fs_real_path_sync(const char *path, struct RealPathOptions options);

void fs_rename_sync(const char *old_path, const char *new_path);

void fs_rmdir_sync(const char *path, struct RmDirOptions options);

void fs_rm_sync(const char *path, struct RmOptions options);

struct FileStat *fs_stat_sync(const char *path);

void fs_symlink_sync(const char *target, const char *path, const char *_type_);

void fs_truncate_sync(const char *path, uint64_t len);

void fs_unlink_sync(const char *path);

void fs_utimes_sync(const char *path, int64_t atime, int64_t mtime);

uintptr_t fs_write_sync(int32_t fd,
                        const uint8_t *buffer,
                        uintptr_t length,
                        struct WriteOptions options);

uintptr_t fs_write_string_sync(int32_t fd,
                               const char *string,
                               enum StringEncoding encoding,
                               intptr_t position);

void fs_write_file_with_str_sync(int32_t fd, const char *data, struct WriteFileOptions options);

void fs_write_file_with_bytes_sync(int32_t fd,
                                   const uint8_t *data,
                                   uintptr_t length,
                                   struct WriteFileOptions options);

void fs_write_file_with_str_from_path_sync(const char *path,
                                           const char *data,
                                           struct WriteFileOptions options);

void fs_write_file_with_bytes_from_path_sync(const char *path,
                                             const uint8_t *data,
                                             uintptr_t length,
                                             struct WriteFileOptions options);

void fs_write_file_with_buffer_from_path_sync(const char *path,
                                              const struct Buffer *data,
                                              struct WriteFileOptions options);

uintptr_t fs_writev_sync(int32_t fd, struct Buffer **buffers, uintptr_t length, int64_t position);

uintptr_t fs_writev_sync_slice(int32_t fd,
                               const uint8_t *const *buffers,
                               const uintptr_t *buffers_buffers,
                               uintptr_t length,
                               int64_t position);

void fs_async_access(const char *path, int32_t access, const struct AsyncClosure *callback);

void fs_async_append_file_with_str(int32_t fd,
                                   const char *data,
                                   struct AppendFileOptions options,
                                   const struct AsyncClosure *callback);

void fs_async_append_file_with_bytes(int32_t fd,
                                     const struct Buffer *data,
                                     struct AppendFileOptions options,
                                     const struct AsyncClosure *callback);

void fs_async_append_file_with_path_str(const char *path,
                                        const char *data,
                                        struct AppendFileOptions options,
                                        const struct AsyncClosure *callback);

void fs_async_append_file_with_path_bytes(const char *path,
                                          const struct Buffer *data,
                                          struct AppendFileOptions options,
                                          const struct AsyncClosure *callback);

void fs_async_chmod(const char *path, uint32_t mode, const struct AsyncClosure *callback);

void fs_async_chown(const char *path,
                    uint32_t uid,
                    uint32_t gid,
                    const struct AsyncClosure *callback);

void fs_async_close(int32_t fd, const struct AsyncClosure *callback);

void fs_async_copy_file(const char *src,
                        const char *dest,
                        uint32_t flag,
                        const struct AsyncClosure *callback);

void fs_async_cp(const char *_src, const char *_dest);

void fs_async_exists(const char *path, const struct AsyncBoolClosure *callback);

void fs_async_fchmod(int32_t fd, uint16_t mode, const struct AsyncClosure *callback);

void fs_async_fchown(int32_t fd, uint32_t uid, uint32_t gid, const struct AsyncClosure *callback);

void fs_async_fdatasync(int32_t fd, const struct AsyncClosure *callback);

void fs_async_fstat(int32_t fd, const struct AsyncFileStatClosure *callback);

void fs_async_fsync(int32_t fd, const struct AsyncClosure *callback);

void fs_async_ftruncate(int32_t fd, int64_t len, const struct AsyncClosure *callback);

void fs_async_futimes(int32_t fd,
                      int64_t atime,
                      int64_t mtime,
                      const struct AsyncClosure *callback);

void fs_async_lchmod(const char *path, uint16_t mode, const struct AsyncClosure *callback);

void fs_async_lchown(const char *path,
                     uint32_t uid,
                     uint32_t gid,
                     const struct AsyncClosure *callback);

void fs_async_lutimes(const char *path,
                      int64_t atime,
                      int64_t mtime,
                      const struct AsyncClosure *callback);

void fs_async_link(const char *existing_path,
                   const char *new_path,
                   const struct AsyncClosure *callback);

void fs_async_lstat(const char *path, const struct AsyncFileStatClosure *callback);

void fs_async_mkdir(const char *path,
                    struct MkDirOptions options,
                    const struct AsyncClosure *callback);

void fs_async_mkdtemp(const char *prefix,
                      struct MkdTempOptions options,
                      const struct AsyncStringClosure *callback);

void fs_async_open(const char *path,
                   int32_t flag,
                   int32_t mode,
                   const struct AsyncI32Closure *callback);

void fs_async_open_handle(const char *path,
                          int32_t flag,
                          int32_t mode,
                          const struct AsyncFileHandleClosure *callback);

void fs_async_opendir(const char *path,
                      struct OpenDirOptions options,
                      const struct AsyncFileDirClosure *callback);

void fs_async_read(int32_t fd,
                   struct Buffer *buffer,
                   uintptr_t offset,
                   uintptr_t length,
                   intptr_t position,
                   const struct AsyncUsizeClosure *callback);

void fs_async_read_bytes(int32_t fd,
                         uint8_t *buffer,
                         uintptr_t buffer_length,
                         uintptr_t offset,
                         uintptr_t length,
                         intptr_t position,
                         const struct AsyncUsizeClosure *callback);

void fs_async_readdir(const char *path,
                      struct ReaddirOptions options,
                      const struct AsyncReaddirClosure *callback);

void fs_async_read_file(const char *path,
                        struct ReadFileOptions options,
                        const struct AsyncFsEncodingClosure *callback);

void fs_async_read_file_with_fd(int32_t fd,
                                struct ReadFileOptions options,
                                const struct AsyncFsEncodingClosure *callback);

void fs_async_read_link(const char *path,
                        struct ReadLinkOptions options,
                        const struct AsyncFsEncodingClosure *callback);

void fs_async_readv(int32_t fd,
                    const struct Buffer *buffers,
                    uintptr_t length,
                    uintptr_t position,
                    const struct AsyncUsizeClosure *callback);

void fs_async_real_path(const char *path,
                        struct RealPathOptions options,
                        const struct AsyncStringClosure *callback);

void fs_async_rename(const char *old_path,
                     const char *new_path,
                     const struct AsyncClosure *callback);

void fs_async_rmdir(const char *path,
                    struct RmDirOptions options,
                    const struct AsyncClosure *callback);

void fs_async_rm(const char *path, struct RmOptions options, const struct AsyncClosure *callback);

void fs_async_stat(const char *path,
                   bool throw_if_no_entry,
                   const struct AsyncFileStatClosure *callback);

void fs_async_symlink(const char *target,
                      const char *path,
                      const char *type_,
                      const struct AsyncClosure *callback);

void fs_async_truncate(const char *path, uint64_t len, const struct AsyncClosure *callback);

void fs_async_unlink(const char *path, const struct AsyncClosure *callback);

void fs_async_unwatch_file(const char *filename);

void fs_async_unwatch_file_with_callback(const char *filename,
                                         const struct AsyncFileWatchClosure *callback);

void fs_async_utimes(const char *path,
                     int64_t atime,
                     int64_t mtime,
                     const struct AsyncClosure *callback);

void fs_async_file_watcher_unref(const char *filename,
                                 const struct AsyncFileWatchClosure *callback);

void fs_async_file_watcher_ref(const char *filename, const struct AsyncFileWatchClosure *callback);

void fs_async_watch(const char *filename,
                    bool persistent,
                    bool recursive,
                    enum FsEncodingType encoding,
                    const struct AsyncWatchClosure *callback);

void fs_async_watcher_unref(const char *filename, const struct AsyncWatchClosure *callback);

void fs_async_watcher_ref(const char *filename, const struct AsyncWatchClosure *callback);

void fs_async_watcher_close(const char *filename,
                            const struct AsyncWatchClosure *callback,
                            const struct AsyncClosure *on_close);

void fs_async_watch_file(const char *filename,
                         bool bigint,
                         bool persistent,
                         uint64_t interval,
                         enum FsEncodingType encoding,
                         const struct AsyncFileWatchClosure *callback);

void fs_async_write(int32_t fd,
                    const struct Buffer *buffer,
                    struct WriteOptions options,
                    const struct AsyncUsizeClosure *callback);

void fs_async_write_slice(int32_t fd,
                          const uint8_t *buffer,
                          uintptr_t length,
                          struct WriteOptions options,
                          const struct AsyncUsizeClosure *callback);

void fs_async_write_string(int32_t fd,
                           const char *string,
                           enum StringEncoding encoding,
                           intptr_t position,
                           const struct AsyncUsizeClosure *callback);

void fs_async_write_file_with_str(int32_t fd,
                                  const char *data,
                                  struct WriteFileOptions options,
                                  const struct AsyncClosure *callback);

void fs_async_write_file_with_bytes(int32_t fd,
                                    const struct Buffer *data,
                                    struct WriteFileOptions options,
                                    const struct AsyncClosure *callback);

void fs_async_write_file_with_bytes_raw(int32_t fd,
                                        const uint8_t *data,
                                        uintptr_t length,
                                        struct WriteFileOptions options,
                                        const struct AsyncClosure *callback);

void fs_async_write_file_with_str_from_path(const char *path,
                                            const char *data,
                                            struct WriteFileOptions options,
                                            const struct AsyncClosure *callback);

void fs_async_write_file_with_bytes_from_path(const char *path,
                                              const struct Buffer *data,
                                              struct WriteFileOptions options,
                                              const struct AsyncClosure *callback);

void fs_async_write_file_with_bytes_from_path_raw(const char *path,
                                                  const uint8_t *data,
                                                  uintptr_t length,
                                                  struct WriteFileOptions options,
                                                  const struct AsyncClosure *callback);

void fs_async_writev(int32_t fd,
                     const struct Buffer *buffers,
                     uintptr_t length,
                     uintptr_t position,
                     const struct AsyncUsizeClosure *callback);

void fs_async_writev_slice(int fd,
                           uint8_t *const *buffers,
                           const uintptr_t *buffers_buffers,
                           uintptr_t length,
                           int64_t position,
                           const struct AsyncUsizeClosure *callback);

void fs_handle_new_async(const char *path,
                         int32_t flags,
                         int32_t mode,
                         const struct AsyncFileHandleClosure *callback);

void fs_handle_append_file_with_str(struct FileHandle *handle,
                                    const char *data,
                                    struct AppendFileOptions options,
                                    const struct AsyncClosure *callback);

void fs_handle_append_file_with_bytes(struct FileHandle *handle,
                                      const struct Buffer *data,
                                      struct AppendFileOptions options,
                                      const struct AsyncClosure *callback);

void fs_handle_chmod(struct FileHandle *handle, uint16_t mode, const struct AsyncClosure *callback);

void fs_handle_chown(struct FileHandle *handle,
                     uint32_t uid,
                     uint32_t gid,
                     const struct AsyncClosure *callback);

void fs_handle_close(struct FileHandle *handle, const struct AsyncClosure *callback);

void fs_handle_datasync(struct FileHandle *handle, const struct AsyncClosure *callback);

int32_t fs_handle_fd(struct FileHandle *handle);

void fs_handle_read(struct FileHandle *handle,
                    struct Buffer *buffer,
                    uintptr_t offset,
                    uintptr_t length,
                    intptr_t position,
                    const struct AsyncUsizeClosure *callback);

void fs_handle_read_bytes(struct FileHandle *handle,
                          uint8_t *buffer,
                          uintptr_t buffer_length,
                          uintptr_t offset,
                          uintptr_t length,
                          intptr_t position,
                          const struct AsyncUsizeClosure *callback);

void fs_handle_read_file(struct FileHandle *handle,
                         struct ReadFileOptions options,
                         const struct AsyncFsEncodingClosure *callback);

void fs_async_readv_slice(int fd,
                          uint8_t *const *buffers,
                          const uintptr_t *buffers_buffers,
                          uintptr_t length,
                          int64_t position,
                          const struct AsyncUsizeClosure *callback);

void fs_handle_readv_slice(struct FileHandle *handle,
                           uint8_t *const *buffers,
                           const uintptr_t *buffers_buffers,
                           uintptr_t length,
                           int64_t position,
                           const struct AsyncUsizeClosure *callback);

void fs_handle_readv(struct FileHandle *handle,
                     const struct Buffer *buffers,
                     uintptr_t length,
                     uintptr_t position,
                     const struct AsyncUsizeClosure *callback);

void fs_handle_stat(struct FileHandle *handle, const struct AsyncFileStatClosure *callback);

void fs_handle_sync(struct FileHandle *handle, const struct AsyncClosure *callback);

void fs_handle_truncate(struct FileHandle *handle,
                        uintptr_t len,
                        const struct AsyncClosure *callback);

void fs_handle_utimes(struct FileHandle *handle,
                      uintptr_t atime,
                      uintptr_t mtime,
                      const struct AsyncClosure *callback);

void fs_handle_write(struct FileHandle *handle,
                     const struct Buffer *buffer,
                     struct WriteOptions options,
                     const struct AsyncUsizeClosure *callback);

void fs_handle_write_bytes(struct FileHandle *handle,
                           const uint8_t *buffer,
                           uintptr_t length,
                           struct WriteOptions options,
                           const struct AsyncUsizeClosure *callback);

void fs_handle_write_string(struct FileHandle *handle,
                            const char *data,
                            enum StringEncoding encoding,
                            intptr_t position,
                            const struct AsyncUsizeClosure *callback);

void fs_handle_write_file_with_str(struct FileHandle *handle,
                                   const char *data,
                                   struct WriteFileOptions options,
                                   const struct AsyncClosure *callback);

void fs_handle_write_file_with_bytes(struct FileHandle *handle,
                                     const struct Buffer *data,
                                     struct WriteFileOptions options,
                                     const struct AsyncClosure *callback);

void fs_handle_write_file_with_bytes_slice(struct FileHandle *handle,
                                           const uint8_t *data,
                                           uintptr_t length,
                                           struct WriteFileOptions options,
                                           const struct AsyncClosure *callback);

void fs_handle_writev(struct FileHandle *handle,
                      const struct Buffer *buffers,
                      uintptr_t length,
                      uintptr_t position,
                      const struct AsyncUsizeClosure *callback);

void fs_handle_writev_slice(struct FileHandle *handle,
                            const uint8_t *const *buffers,
                            const uintptr_t *buffers_buffers,
                            uintptr_t length,
                            uintptr_t position,
                            const struct AsyncUsizeClosure *callback);

void fs_filewatch_event_destroy(struct FileWatchEvent *event);

struct FileStat *fs_filewatch_event_current(const struct FileWatchEvent *event);

struct FileStat *fs_filewatch_event_previous(const struct FileWatchEvent *event);

void fs_watch_event_destroy(struct WatchEvent *event);

const char *fs_watch_event_event_type(const struct WatchEvent *event);

const char *fs_watch_event_filename(const struct WatchEvent *event);

void fs_file_dir_destroy(struct FileDir *value);

void fs_filehandle_destroy(struct FileHandle *value);

void fs_async_file_watch_closure_destroy(struct AsyncFileWatchClosure *value);

void fs_async_watch_closure_destroy(struct AsyncWatchClosure *value);

struct AsyncClosure *fs_async_create_async_closure(void *on_success, void *on_error, void *data);

struct AsyncBoolClosure *fs_async_create_async_bool_closure(void *on_success,
                                                            void *on_error,
                                                            void *data);

struct AsyncFileStatClosure *fs_async_create_async_file_stat_closure(void *on_success,
                                                                     void *on_error,
                                                                     void *data);

struct AsyncStringClosure *fs_async_create_async_string_closure(void *on_success,
                                                                void *on_error,
                                                                void *data);

struct AsyncUsizeClosure *fs_async_create_async_usize_closure(void *on_success,
                                                              void *on_error,
                                                              void *data);

struct AsyncI32Closure *fs_async_create_async_i32_closure(void *on_success,
                                                          void *on_error,
                                                          void *data);

struct AsyncFileWatchClosure *fs_async_create_async_file_watch_closure(void *on_success,
                                                                       void *on_error,
                                                                       void *data);

struct AsyncFsEncodingClosure *fs_async_create_async_fs_encoding_closure(void *on_success,
                                                                         void *on_error,
                                                                         void *data);

struct AsyncWatchClosure *fs_async_create_async_fs_watch_closure(void *on_success,
                                                                 void *on_error,
                                                                 void *data);

struct AsyncReaddirClosure *fs_async_create_async_fs_readdir_closure(void *on_success,
                                                                     void *on_error,
                                                                     void *data);

struct AsyncFileDirClosure *fs_async_create_async_fs_file_dir_closure(void *on_success,
                                                                      void *on_error,
                                                                      void *data);

struct AsyncFileHandleClosure *fs_async_create_async_fs_file_handle_closure(void *on_success,
                                                                            void *on_error,
                                                                            void *data);

#endif /* NODE_C_H */
